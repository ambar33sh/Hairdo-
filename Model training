import cv2
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Dense, Dropout, Flatten, Activation
from keras.optimizers import Adam
import tensorflow as tf
from PIL import ImageFile

ImageFile.LOAD_TRUNCATED_IMAGES = True

train_data_gen = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1./255)
validation_data_gen = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1./255)

train_generator = train_data_gen.flow_from_directory(
    'ownDataset/training',
    target_size=(48, 48),
    batch_size=40,
    color_mode="grayscale",
    class_mode='categorical'
)

validation_generator = validation_data_gen.flow_from_directory(
    'ownDataset/testing',
    target_size=(48, 48),
    batch_size=40,
    color_mode="grayscale",
    class_mode='categorical'
)

# Model structure
model = Sequential()
model.add(Conv2D(32, kernel_size=(3, 3), padding='same', input_shape=(48, 48, 1)))
model.add(Activation('relu'))
model.add(Conv2D(32, kernel_size=(3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Conv2D(48, kernel_size=(3, 3), padding='same'))
model.add(Activation('relu'))
model.add(Conv2D(48, kernel_size=(3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Flatten())  # Flatten the output before Dense layers
model.add(Dense(512))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(4, activation='softmax'))  # Change 4 to the number of classes in your classification task

cv2.ocl.setUseOpenCL(False)

model.compile(loss='categorical_crossentropy', optimizer=Adam(learning_rate=0.0001), metrics=['accuracy'])

# Calculate steps_per_epoch and validation_steps
steps_per_epoch = len(train_generator)
validation_steps = len(validation_generator)

emotion_model_info = model.fit(
    train_generator,
    steps_per_epoch=steps_per_epoch,
    epochs=70,
    validation_data=validation_generator,
    validation_steps=validation_steps
)

# Save model architecture with weights
model_json = model.to_json()
with open("face_6_1APR.json", "w") as json_file:
    json_file.write(model_json)
model.save_weights('Face6_1APR.weights.h5')
